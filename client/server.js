!function(e){var t={};function a(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=22)}([function(e,t){e.exports=require("react")},function(e,t,a){"use strict";var n=a(0),r=a.n(n),s=a(2);const c=(new s.b).get(),l=Object(n.createContext)({logged:!!c,loginError:!1,token:c,username:"",updateClient:e=>{}}),o=({children:e})=>{const[t,a]=Object(n.useState)({logged:!!c,loginError:!1,token:c,username:""});return r.a.createElement(l.Provider,{value:Object.assign(Object.assign({},t),{updateClient:e=>{a(Object.assign({},Object.assign(Object.assign({},t),e)))}})},e)},i={isLoading:!1};function m(e,t){switch(t.type){case"SET_LOADING":return{isLoading:t.payload};default:return e}}const u=Object(n.createContext)(i),d=({children:e})=>{const[t,a]=Object(n.useReducer)(m,i);return r.a.createElement(u.Provider,{value:Object.assign(Object.assign({},t),{dispatch:a})},e)};const p={en:a(14),fr:a(15)};var g=a(10);const h=(e,t)=>{const a=e[0];return e.length&&t[a.toString()]?(e.shift(),h(e,t[a.toString()])):e.length?void 0:t},f=["en","fr"],b=Object(n.createContext)({language:"en",translate:e=>e,setSelectedLanguage:e=>null}),v=({children:e})=>{const t=new RegExp("/[a-z]{2}/"),{language:a}=Object(g.useParams)(),{url:c}=Object(g.useRouteMatch)(),{pathname:l}=Object(g.useLocation)(),{push:i}=Object(g.useHistory)(),[m,u]=Object(n.useState)((e=>{var t;const a=e||(new s.a).get()||(null===(t=Object(s.d)())||void 0===t?void 0:t.navigator.language.split("-")[0])||"";return f.includes(a)?a:"en"})(a));Object(n.useEffect)(()=>{if(!l.match(`^/(${m})(/|$)`)){const e=c.split(t)[1];i(`/${m}${e?"/"+e:""}`)}},[m,l,i,t,c]);return r.a.createElement(b.Provider,{value:{language:m,translate:e=>h(e.split("."),p[m])||e,setSelectedLanguage:e=>{(new s.a).set(e),u(e)}}},r.a.createElement(o,null,e))},E={items:[]};function w(e,t){const a=e.items;switch(t.type){case"ADD_SELECTED_ITEM":return a.includes(t.payload)||a.push(t.payload),Object.assign(Object.assign({},e),{items:a});case"REMOVE_SELECTED_ITEM":const n=a.findIndex(e=>e===t.payload);return n>-1&&a.splice(n,1),Object.assign(Object.assign({},e),{items:a});default:return e}}const x=Object(n.createContext)(E),y=({children:e})=>{const[t,a]=Object(n.useReducer)(w,E);return r.a.createElement(x.Provider,{value:Object.assign(Object.assign({},t),{dispatch:a})},e)};a.d(t,"b",(function(){return l})),a.d(t,"c",(function(){return u})),a.d(t,"d",(function(){return d})),a.d(t,"e",(function(){return b})),a.d(t,"f",(function(){return v})),a.d(t,"a",(function(){return"ADD_SELECTED_ITEM"})),a.d(t,"g",(function(){return"REMOVE_SELECTED_ITEM"})),a.d(t,"h",(function(){return x})),a.d(t,"i",(function(){return y}))},function(e,t,a){"use strict";a.d(t,"e",(function(){return s})),a.d(t,"d",(function(){return c})),a.d(t,"f",(function(){return l})),a.d(t,"g",(function(){return o})),a.d(t,"b",(function(){return m})),a.d(t,"a",(function(){return u})),a.d(t,"c",(function(){return d}));var n=a(12),r=a.n(n);const s=()=>"undefined"!=typeof window,c=()=>s()&&window||void 0,l=s()&&window.INITIAL_STATE||void 0,o=(e,t)=>e.split("%s").map((e,a)=>`${e}${t[a]||""}`).join("");class i{constructor(){this.hasLS="undefined"!=typeof window,this.name=""}get(){return this.hasLS&&localStorage.getItem(this.name)||""}set(e){this.hasLS&&localStorage.setItem(this.name,e)}delete(){this.hasLS&&localStorage.removeItem(this.name)}}class m extends i{constructor(){super(...arguments),this.name="token"}set(e){super.set(e),(new d).set(r()(e))}getDecoded(){return r()(super.get())}}class u extends i{constructor(){super(...arguments),this.name="language"}}class d extends i{constructor(){super(...arguments),this.name="username"}}},function(e,t,a){"use strict";var n=a(6),r=function(e,t,a,n){return new(a||(a=Promise))((function(r,s){function c(e){try{o(n.next(e))}catch(e){s(e)}}function l(e){try{o(n.throw(e))}catch(e){s(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(c,l)}o((n=n.apply(e,t||[])).next())}))};class s extends n.b{constructor(e){super(e),this.codePackages=e.codePackages,this.image=e.image,this.texts=e.texts,this.translations=e.translations}}class c extends n.a{constructor(){super(...arguments),this.endpoint="/articles"}get({id:e}){return r(this,void 0,void 0,(function*(){return this.endpoint="/article",this.getOne({endpoint:"/"+e}).then(({data:e})=>new s(e))}))}getAll(){return this.getMany().then(e=>e.map(e=>new s(e)))}}var l=function(e,t,a,n){return new(a||(a=Promise))((function(r,s){function c(e){try{o(n.next(e))}catch(e){s(e)}}function l(e){try{o(n.throw(e))}catch(e){s(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(c,l)}o((n=n.apply(e,t||[])).next())}))};class o extends n.b{constructor(e){super(e),this.abstract=e.abstract,this.city=e.city,this.code=e.cp,this.date=e.date,this.image=e.image,this.link=e.link,this.name=e.name,this.street=e.street,this.to="/conferences/"+[this.city.toLowerCase(),e.date.split("T")[0]].join("-")}}class i extends n.a{constructor(){super(...arguments),this.endpoint="/conferences"}get({id:e}){return l(this,void 0,void 0,(function*(){return this.endpoint="/conference",this.getOne({endpoint:"/"+e}).then(({data:e})=>new o(e))}))}getAll(){return this.getMany().then(e=>e.map(e=>new o(e)))}}class m extends n.a{constructor(){super(...arguments),this.endpoint="/contact"}send({data:e,ref:t,setError:a,setSent:n}){return this.post({data:e}).then(({status:e})=>{200===e&&(a(!1),n(!0),t.current.reset())}).catch(()=>{a(!0)})}}class u extends n.b{constructor(e){super(e),this.tags=e.tags.map(({name:e})=>e),this.name=e.name,this.description=e.description,this.image=e.image,this.link=e.link}}class d extends n.a{constructor(){super(...arguments),this.endpoint="/sites"}getAll(){return this.getMany().then(e=>e.map(e=>new u(e)))}}var p=a(2);class g extends n.a{constructor(){super(...arguments),this.endpoint="/login"}login({callback:e,data:t,ref:a}){return super.post({data:t}).then(({status:t,data:n})=>{if(200===t){const{token:t}=n;(new p.b).set(t),e&&e({logged:!0,loginError:!1,token:t,username:(new p.c).get()}),a.current.reset()}}).catch(()=>e&&e({logged:!1,loginError:!0}))}}class h extends n.a{constructor(){super(...arguments),this.endpoint="/users"}register({data:e,ref:t}){return super.post({data:e}).then(({status:e})=>{201===e&&t.current.reset()})}logout({callback:e}){(new p.b).delete(),e({logged:!1,loginError:!1,token:null,username:""})}}a.d(t,"a",(function(){return c})),a.d(t,"b",(function(){return i})),a.d(t,"c",(function(){return m})),a.d(t,"d",(function(){return d})),a.d(t,"e",(function(){return g})),a.d(t,"f",(function(){return h}))},function(e,t,a){"use strict";a.d(t,"c",(function(){return m})),a.d(t,"d",(function(){return u})),a.d(t,"e",(function(){return d})),a.d(t,"f",(function(){return p})),a.d(t,"g",(function(){return g})),a.d(t,"h",(function(){return h})),a.d(t,"i",(function(){return f})),a.d(t,"j",(function(){return b})),a.d(t,"a",(function(){return x})),a.d(t,"b",(function(){return y}));var n,r,s,c,l=a(0),o=a.n(l),i=a(2);const m="SET_ARTICLE",u="SET_ARTICLES",d="SET_CATEGORIES",p="SET_CONFERENCE",g="SET_CONFERENCES",h="SET_CREATIONS",f="SET_DIPLOMAS",b="SET_JOBS";function v(e={},t=(e=>e)){return Object.fromEntries(Object.keys(e).map(a=>[a,t(e[a].toString()||"{}")||e[a]]))}const E={article:v(null===i.f||void 0===i.f?void 0:i.f.blogItem,e=>JSON.parse(decodeURIComponent(e))),articles:(null===(n=null===i.f||void 0===i.f?void 0:i.f.blogList)||void 0===n?void 0:n.articles)||[],categories:[],conference:v(null===i.f||void 0===i.f?void 0:i.f.conference),conferences:{list:(null===(r=null===i.f||void 0===i.f?void 0:i.f.conferences)||void 0===r?void 0:r.conferences)||[],welcome:(null===(s=null===i.f||void 0===i.f?void 0:i.f.welcome)||void 0===s?void 0:s.conferences)||[]},creations:(null===(c=null===i.f||void 0===i.f?void 0:i.f.creations)||void 0===c?void 0:c.creations)||[],diplomas:(null===i.f||void 0===i.f?void 0:i.f.diplomas)||[],jobs:(null===i.f||void 0===i.f?void 0:i.f.jobs)||[],dispatch:()=>{}},w=(e,{payload:t,type:a})=>{switch(a){case m:return Object.assign(Object.assign({},e),{article:Object.assign(Object.assign({},e.article),{[t.key]:t.value})});case u:return Object.assign(Object.assign({},e),{articles:t});case d:return Object.assign(Object.assign({},e),{categories:t});case p:const a=`${t.city.toLowerCase()}-${t.date}`;return Object.assign(Object.assign({},e),{conference:Object.assign(Object.assign({},e.conference),{[a]:t})});case g:return Object.assign(Object.assign({},e),{conferences:Object.assign(Object.assign({},e.conferences),{[t.key]:t.value})});case h:return Object.assign(Object.assign({},e),{creations:t});case f:return Object.assign(Object.assign({},e),{diplomas:t});case b:return Object.assign(Object.assign({},e),{jobs:t});default:return e}},x=Object(l.createContext)(E),y=({children:e})=>{const[t,a]=Object(l.useReducer)(w,E);return o.a.createElement(x.Provider,{value:Object.assign(Object.assign({},t),{dispatch:a})},e)}},function(e,t){e.exports=require("react-bootstrap")},function(e,t,a){"use strict";a.d(t,"b",(function(){return c})),a.d(t,"a",(function(){return l}));var n=a(17),r=a.n(n),s=function(e,t,a,n){return new(a||(a=Promise))((function(r,s){function c(e){try{o(n.next(e))}catch(e){s(e)}}function l(e){try{o(n.throw(e))}catch(e){s(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(c,l)}o((n=n.apply(e,t||[])).next())}))};class c{constructor(e){this.name="",this["@id"]=e["@id"],this.id=e["@id"].split("/")[2]}}class l{constructor({filters:e,pagination:t}={}){this.endpoint="",this.filters={},this.pagination={},this.formatQueryParameters=()=>{const e=Object.entries(Object.assign(Object.assign({},this.pagination),this.filters)).reduce((e,[t,a])=>a||!1===a?Array.isArray(a)&&a.length?Object.assign(Object.assign({},e),{[t]:`[${a[0].value?a.map(e=>e.value).join(","):a.join(",")}]`}):a.value||!1===a.value?Object.assign(Object.assign({},e),{[t]:a.value}):a.length?Object.assign(Object.assign({},e),{[t]:a}):e:e,{});return Object.keys(e).length?"?"+new URLSearchParams(e).toString():""},this.filters=e||{},this.pagination=t||{}}getRequest(){return r.a.create({baseURL:"http://cache",headers:{"Content-Type":"application/ld+json",Accept:"application/ld+json"}})}getOne({endpoint:e=""}={}){return s(this,void 0,void 0,(function*(){return this.getRequest().get(`${this.endpoint}${e}`)}))}getMany(){return s(this,void 0,void 0,(function*(){return this.getRequest().get(`${this.endpoint}${this.formatQueryParameters()}`).then(({data:e})=>e["hydra:member"])}))}post({data:e}){return s(this,void 0,void 0,(function*(){return this.getRequest().post(this.endpoint,e)}))}patch({endpoint:e="",data:t}){return s(this,void 0,void 0,(function*(){return this.getRequest().patch(this.endpoint,t)}))}}},function(e,t){e.exports=require("react-router-dom")},function(e,t,a){"use strict";var n=a(0),r=a.n(n),s=(a(13),a(5));var c=a(2);const l=()=>{const e=Object(n.useCallback)(()=>{var e,t;return{width:null===(e=Object(c.d)())||void 0===e?void 0:e.innerWidth,height:null===(t=Object(c.d)())||void 0===t?void 0:t.innerHeight}},[]),[t,a]=Object(n.useState)(e);return Object(n.useEffect)(()=>{if(Object(c.e)())return window.addEventListener("resize",t),()=>window.removeEventListener("resize",t);function t(){a(e())}},[e]),t};var o=a(1);const i=({icon:e,title:t,children:a})=>{const[s,c]=Object(n.useState)(!1),{translate:l}=Object(n.useContext)(o.e),i=Object(n.createRef)();return((e,t)=>{const a=a=>{e.current&&!e.current.contains(a.target)&&t()};Object(n.useEffect)(()=>(document.addEventListener("click",a),()=>{document.removeEventListener("click",a)}))})(i,()=>c(!1)),r.a.createElement("div",{className:"dropdown nav-item",ref:i},r.a.createElement("span",{"aria-haspopup":"true","aria-expanded":"false",onClick:()=>c(!s),className:(s?"show":"")+" dropdown-toggle nav-link pointer",role:"button"},e?r.a.createElement("i",{className:"fas fa-"+e}):"",e?" ":"",l(`navbar.${t}.label`)),r.a.createElement("div",{className:(s?"show":"")+" dropdown-menu dropdown-menu-right mt-lg-2 shadow","aria-labelledby":t},a))};var m=a(7);const u=({children:e,className:t,href:a})=>r.a.createElement("a",{target:"_blank",rel:"noopener noreferrer",className:(t||"text-muted")+" no-decoration",href:a},e),d=({children:e,className:t,to:a})=>{const{language:s}=Object(n.useContext)(o.e);return r.a.createElement(m.Link,{className:t,to:`/${s}${a}`},e)},p=({className:e,icon:t,type:a})=>r.a.createElement("i",{className:`${a||"fas"} fa-${t} my-auto${e?" "+e:""}`}),g=(e,t)=>"/"===e.path?t.match(new RegExp(/^\/[a-z]{2}(\/)?$/)):t.includes((e.path||"").toString()),h=({route:e})=>{const{updateClient:t}=Object(n.useContext)(o.b),{pathname:a}=Object(m.useLocation)(),{setSelectedLanguage:s,translate:c}=Object(n.useContext)(o.e);return r.a.createElement("li",{className:"nav-item"},r.a.createElement(d,{to:e.realPath||e.path,onClick:a=>{e.handleClick&&(a.preventDefault(),e.changeLanguage&&e.changeLanguage(s),!0!==e.handleClick&&e.handleClick(t))},className:"nav-link "+(g(e,a)&&"active")},r.a.createElement(p,Object.assign({},e.icon))," ",c("navbar."+e.name)))},f=[{value:"en",label:"English"},{value:"fr",label:"Français"}],b=()=>{var e;const[t,a]=Object(n.useState)(((null===(e=Object(c.d)())||void 0===e?void 0:e.scrollY)||0)<120),{language:l,setSelectedLanguage:m}=Object(n.useContext)(o.e),u=()=>{var e;a(((null===(e=Object(c.d)())||void 0===e?void 0:e.scrollY)||0)<120)};return Object(n.useEffect)(()=>{const e=Object(c.d)();return null==e||e.addEventListener("scroll",u),()=>null==e?void 0:e.removeEventListener("scroll",u)},[]),r.a.createElement(r.a.Fragment,null,r.a.createElement(s.Navbar,{bg:t?"transparent":"gradient",collapseOnSelect:!0,expand:"lg",sticky:"top",variant:"dark"},r.a.createElement(s.Container,null,r.a.createElement(s.Navbar.Brand,{href:"/"},"<devcv/>"),r.a.createElement(s.Navbar.Toggle,{"aria-controls":"appbar"}),r.a.createElement(s.Navbar.Collapse,{id:"appbar"},r.a.createElement(s.Nav,{className:"ml-auto"},ke.map((e,t)=>r.a.createElement(h,{key:t,route:e})),r.a.createElement(i,{title:"language",icon:"language"},f.map((e,t)=>r.a.createElement(s.NavDropdown.Item,{key:t,onClick:()=>m(e.value),active:l===e.value},e.label))))))),r.a.createElement("div",{className:"return-to-top text-white fs-3 m-auto position-fixed transition z-5 rounded-circle pointer "+(t?"d-none":"d-flex"),onClick:()=>window.scrollTo({behavior:"smooth",top:0})},r.a.createElement(p,{icon:"angle-up",className:"m-auto"})))},v=[{icon:"twitter",link:"https://twitter.com/darkweak_dev",type:"fab"},{icon:"github",link:"https://github.com/darkweak",type:"fab"},{icon:"laptop-code",link:"https://devcv.fr"}],E=()=>{const{translate:e}=Object(n.useContext)(o.e);return r.a.createElement("footer",null,r.a.createElement("div",{className:"container py-3"},r.a.createElement("div",{className:"row fs-3"},r.a.createElement("div",{className:"col-xs-12 col-md-4 text-center align-self-center py-2"},r.a.createElement("span",{className:"text-white"},r.a.createElement(p,{icon:"code"})," ",e("footer.developped")," Darkweak")),r.a.createElement("div",{className:"col-xs-12 col-md-4 text-center align-self-center py-2"},r.a.createElement("span",{className:"text-white"},e("footer.made")," ",r.a.createElement(p,{icon:"heart"}))),r.a.createElement("div",{className:"col-xs-12 col-md-4 text-center align-self-center py-2"},r.a.createElement("span",{className:"text-white"},e("footer.find")),r.a.createElement("br",null),r.a.createElement("div",{className:"text-white d-flex"},r.a.createElement("div",{className:"m-auto"},v.map((e,t)=>r.a.createElement("span",{key:t,className:"px-1"},r.a.createElement(u,{className:"text-white fs-4",href:e.link},r.a.createElement(p,Object.assign({},e)))))))))),r.a.createElement("div",{className:"footer-c pt-2 pb-2"},r.a.createElement("div",{className:"container text-white-50 text-center"},"© Sylvain COMBRAQUE")))},w=({children:e,title:t})=>{const{translate:a}=Object(n.useContext)(o.e);return Object(n.useEffect)(()=>{document.title=a(t||"devcv | Sylvain COMBRAQUE")},[t,a]),r.a.createElement("div",{className:"bg-gradient"},r.a.createElement("main",null,r.a.createElement(b,null),r.a.createElement("div",{className:"pt-4"},e)),r.a.createElement(E,null))};a(23);var x=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(a[n[r]]=e[n[r]])}return a};const y=e=>{var{children:t,color:a,outlined:n,pilled:s,size:c,squared:l,type:o}=e,i=x(e,["children","color","outlined","pilled","size","squared","type"]);return r.a.createElement("button",Object.assign({type:o,className:`btn ${c&&"btn-"+c} ${l?"btn-squared":s&&"btn-pill"} btn-${n?"outline-":""}${a}`},i),t)},j=e=>r.a.createElement(y,Object.assign({pilled:!0},e)),O=e=>r.a.createElement(j,Object.assign({color:"success"},e)),N=e=>r.a.createElement(j,Object.assign({color:"light"},e));const C=({className:e,data:t,color:a})=>r.a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",className:"img-fluid position-relative top-1",viewBox:"0 0 1440 320"},r.a.createElement("path",{className:"img-fluid fill-"+a,fillOpacity:"1",d:t})),k=e=>r.a.createElement(C,Object.assign({data:"M0,192L48,192C96,192,192,192,288,213.3C384,235,480,277,576,261.3C672,245,768,171,864,144C960,117,1056,139,1152,128C1248,117,1344,75,1392,53.3L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"},e)),S=({children:e})=>r.a.createElement("div",{className:"position-relative"},r.a.createElement("div",{className:"row m-0 pt-5"},e),r.a.createElement(k,{color:"light",className:"bg-transparent bottom-0"}));a(24);const L=({children:e,className:t,delay:a})=>{const s=Object(n.createRef)(),c=((e,t=0)=>{const{height:a}=l(),[r,s]=Object(n.useState)(!1),[c,o]=Object(n.useState)();return Object(n.useEffect)(()=>{o(e.current)},[e]),Object(n.useEffect)(()=>{const e=new IntersectionObserver(([e])=>{e.isIntersecting&&s(e.isIntersecting)},{rootMargin:`${a?a-t-1:0}px 0px ${t}px 0px`});if(e)return c?(e.observe(c),()=>{e.unobserve(c)}):void 0},[c,a,t]),r})(s,-50);return r.a.createElement("div",{ref:s,className:`translate-top w-100 ${t||""} ${c?"fade-in-from-bottom":"hidden"} ${a&&"anim-delay--"+5*a}`},e)};a(25);const P=()=>r.a.createElement("div",{className:"spinner"}),A=({className:e,text:t})=>{const{translate:a}=Object(n.useContext)(o.e);return r.a.createElement("div",{className:"py-4 w-100"},r.a.createElement("div",{className:"w-100 border d-flex rounded"},r.a.createElement("span",{className:"h4 d-flex m-auto p-3"},r.a.createElement("span",{className:"my-auto"},r.a.createElement(P,null)),r.a.createElement("span",{className:"pl-2 text-center"},a("loader."+(t||"default"))))))};var $=a(16),T=a.n($);const I=({article:e})=>{const{language:t}=Object(n.useContext)(o.e);return r.a.createElement(r.a.Fragment,null,e?r.a.createElement("div",{className:"col-12"},null==e?void 0:e.texts.map((a,n)=>{var s;return r.a.createElement("div",{className:"py-2",key:n},r.a.createElement(L,null,r.a.createElement("div",{dangerouslySetInnerHTML:{__html:a.translations[t].description}})),null===(s=null==e?void 0:e.codePackages[n])||void 0===s?void 0:s.codes.map((e,t)=>r.a.createElement(L,{key:t},r.a.createElement("div",{className:"py-2"},r.a.createElement(T.a,{language:e.name},e.content)))))})):r.a.createElement(A,{text:"article.item"}))};var R=a(3),M=a(4);a(26);const D=({children:e,item:t})=>r.a.createElement(r.a.Fragment,null,r.a.createElement("img",{loading:"lazy",className:"card-img img-fit",src:"https://sylvaincdn.000webhostapp.com/devcv"+t.image,alt:t.name+" card"}),r.a.createElement("div",{className:"card-img-overlay d-flex transition pointer"},r.a.createElement("div",{className:"m-auto text-center transition"},e))),_=({children:e,item:t})=>t.href?r.a.createElement(u,{href:t.href,className:"card text-white text-decoration-none conference-card"},r.a.createElement(D,Object.assign({},{children:e,item:t}))):r.a.createElement(d,{to:t.to||"",className:"card text-white text-decoration-none conference-card"},r.a.createElement(D,Object.assign({},{children:e,item:t}))),q=({item:e})=>{const{language:t}=Object(n.useContext)(o.e);return r.a.createElement(_,{item:Object.assign(Object.assign({},e),{to:"/blog/"+e.translations[t].slug})},r.a.createElement("h2",{className:"d-block card-title fs-3 m-0 font-weight-bolder"},e.translations[t].title))},F=()=>{const{articles:e,dispatch:t}=Object(n.useContext)(M.a),[a,s]=Object(n.useState)(e);return Object(n.useEffect)(()=>{e.length||(new R.a).getAll().then(e=>{s(e),t({payload:e,type:M.d})})},[e,t]),r.a.createElement("div",{className:"row m-0"},a.length?a.map((e,t)=>r.a.createElement("div",{className:"col-md-6 p-2",key:t},r.a.createElement(q,{item:e}))):r.a.createElement(A,{text:"article.list.default"}))},B=()=>{const{slug:e}=Object(m.useParams)(),{language:t,translate:a}=Object(n.useContext)(o.e),{article:{[""+e]:c},dispatch:l}=Object(n.useContext)(M.a),[i,u]=Object(n.useState)(c);Object(n.useEffect)(()=>{c||(new R.a).get({id:""+e}).then(e=>{u(e),l({payload:{key:e.translations[t].slug,value:e},type:M.c})})},[c,l,t,e]);const d=(null==i?void 0:i.translations[t].title)||"",p=a("loader.article.item");return r.a.createElement(w,{title:d},r.a.createElement(S,null,i?r.a.createElement(L,{className:"mx-auto text-uppercase container"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},i?d:p)):r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},p)),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement(s.Container,null,r.a.createElement(I,{article:i}))))};B.getInitialProps=([,e,,t])=>[(new R.a).get({id:t}).then(t=>({blogItem:{[t.translations[e].slug]:encodeURIComponent(JSON.stringify(t))}})).catch(()=>{})];const z=()=>{const{translate:e}=Object(n.useContext)(o.e);return r.a.createElement(w,{title:"pages.article.list.title"},r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},e("pages.article.wave.title")),r.a.createElement("span",{className:"h5 text-center font-weight-lighter text-white m-auto col-12"},e("pages.article.wave.subtitle")))),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement(s.Container,null,r.a.createElement(F,null))))};z.getInitialProps=()=>[(new R.a).getAll().then(e=>({blogList:{articles:e}}))];const U=({conference:e})=>r.a.createElement("div",{className:"row m-0"},e?r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"col-sm-4"},r.a.createElement("div",{className:"flex-column sticky-top py-5 z-1"},r.a.createElement("p",null,e.name),r.a.createElement("p",null,e.code,", ",e.city),r.a.createElement("p",null,e.street),r.a.createElement("p",null,r.a.createElement("a",{href:e.link,target:"_blank",rel:"noopener noreferrer",className:"text-muted text-decoration-none"},"Lien vers les places")),r.a.createElement("p",null,r.a.createElement(d,{to:"/conferences",className:"text-muted text-decoration-none"},r.a.createElement(p,{icon:"arrow-circle-left"})," Retour aux conférences")))),r.a.createElement("div",{className:"col-sm-8 text-underline"},r.a.createElement("h2",{className:"pb-2"},"Résumé de la conférence :"),e.abstract.split("\n").map((e,t)=>r.a.createElement("span",{className:"fs-3 d-block",key:t},e)))):r.a.createElement(A,{text:"conference.item"})),J=({conferenceContext:e,loadingText:t,max:a,perRow:s=2})=>{const{conferences:{[e]:c},dispatch:l}=Object(n.useContext)(M.a),[o,i]=Object(n.useState)(c||[]);return Object(n.useEffect)(()=>{c.length||new R.b({filters:{perPage:(a||"").toString()}}).getAll().then(t=>{i(t),l({payload:{key:e,value:t},type:M.g})})},[e,l,c,a]),r.a.createElement("div",{className:"row m-0"},o.length?o.map((e,t)=>r.a.createElement("div",{className:`col-md-${12/s} p-2`,key:t},r.a.createElement(_,{item:e},r.a.createElement("h2",{className:"d-block card-title fs-5 font-weight-bolder"},e.city),r.a.createElement("span",{className:"d-block card-text font-weight-bold m-0"},new Date(e.date).toLocaleDateString())))):r.a.createElement(A,{text:"conference.list."+(t||"default")}))},V=()=>{const{city:e,date:t}=Object(m.useParams)(),{conference:{[`${e}-${t}`]:a},dispatch:c}=Object(n.useContext)(M.a),[l,o]=Object(n.useState)(a);return Object(n.useEffect)(()=>{(new R.b).get({id:`${e}-${t}`}).then(e=>{o(e),c({payload:e,type:M.f})})},[e,t,c]),r.a.createElement(w,{title:null==l?void 0:l.name},r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase container"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},l?l.name:"Conference en cours de chargement"))),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement(s.Container,null,r.a.createElement(U,{conference:l}))))};V.getInitialProps=([,,,e])=>[(new R.b).get({id:e}).then(e=>({conference:{[`${e.city}-${e.date}`]:e}}))];const Q=()=>{const{translate:e}=Object(n.useContext)(o.e);return r.a.createElement(w,{title:"pages.conferences.list.title"},r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},e("pages.conferences.wave.title")),r.a.createElement("span",{className:"h5 text-center font-weight-lighter text-white m-auto col-12"},e("pages.conferences.wave.subtitle")))),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement(s.Container,null,r.a.createElement(J,{conferenceContext:"list"}))))};Q.getInitialProps=()=>[(new R.b).getAll().then(e=>({conferences:{conferences:e}}))];const G=e=>({className:e,name:"email",type:"email"}),H=e=>({className:e,name:"firstname"}),W=e=>({className:e,name:"lastname"}),Y=e=>({className:e,name:"message",type:"textarea"}),K=e=>({className:e,name:"password",type:"password"}),X=({children:e,color:t})=>n.createElement("div",{role:"alert",className:"alert alert-"+t},e),Z=({children:e})=>n.createElement(X,{color:"danger"},e),ee=({children:e})=>n.createElement(X,{color:"success"},e),te=({children:e})=>n.createElement(X,{color:"warning"},e),ae=()=>{const[e,t]=Object(n.useState)(!1),[a,s]=Object(n.useState)(!1),{translate:c}=Object(n.useContext)(o.e),l=e=>c("form.contact."+e);return r.a.createElement("div",{className:"card p-3"},e?r.a.createElement("div",{className:"fade-in-from-bottom"},r.a.createElement(Z,null,r.a.createElement("span",null,l("error")))):a?r.a.createElement("div",{className:"fade-in-from-bottom"},r.a.createElement(ee,null,r.a.createElement("span",null,l("success")))):"",r.a.createElement(o.d,null,r.a.createElement(se,Object.assign({},{buttonText:"send",fields:[W("col-sm-6"),H("col-sm-6"),G(),{className:i,name:"subject"},Y()],submitForm:(e,a)=>(new R.c).send({data:e,setError:t,setSent:s,ref:a})}))));var i},ne=()=>{const{logged:e,loginError:t,updateClient:a}=Object(n.useContext)(o.b),{translate:s}=Object(n.useContext)(o.e);return r.a.createElement(r.a.Fragment,null,!e&&t?r.a.createElement("div",{className:"fade-in-from-bottom"},r.a.createElement(te,null,r.a.createElement("span",null,s("form.login.error")))):"",r.a.createElement(o.d,null,r.a.createElement(se,Object.assign({},{additionalLinks:[{label:"register",path:"/register"}],fields:[{className:c,name:"username",type:"email"},K()],submitForm:(e,t)=>(new R.e).login({data:e,callback:a,ref:t})}))));var c};var re=function(e,t,a,n){return new(a||(a=Promise))((function(r,s){function c(e){try{o(n.next(e))}catch(e){s(e)}}function l(e){try{o(n.throw(e))}catch(e){s(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(c,l)}o((n=n.apply(e,t||[])).next())}))};const se=({additionalLinks:e,buttonText:t,fields:a,submitForm:s=(()=>re(void 0,void 0,void 0,(function*(){})))})=>{const{isLoading:c,dispatch:l}=Object(n.useContext)(o.c),{translate:i}=Object(n.useContext)(o.e),m=e=>i("form.field."+e),u=Object(n.createRef)();return r.a.createElement("form",{onSubmit:e=>{e.preventDefault(),l({type:"SET_LOADING",payload:!0}),s((e=>{let t=new FormData(e);return JSON.stringify(Object.fromEntries(t))})(e.target),u).then(()=>{l({type:"SET_LOADING",payload:!1})})},className:"row",ref:u},a.map((e,t)=>r.a.createElement("div",{className:"m-0 py-2 form-group "+(e.className||"col-12"),key:t},e.label?r.a.createElement("label",{htmlFor:e.name},m(e.name+".label")):"","textarea"===e.type?r.a.createElement("textarea",Object.assign({},{className:"w-100 form-control form-control-lg",disabled:c,name:e.name,placeholder:m(e.name+".placeholder"),required:!0,rows:3})):r.a.createElement("input",Object.assign({},{className:"form-control form-control-lg",disabled:c,name:e.name,placeholder:m(e.name+".placeholder"),required:!0,type:e.type||"text"})))),r.a.createElement("div",{className:"text-center w-100"},r.a.createElement(O,{type:"submit"},c?r.a.createElement(P,null):r.a.createElement(r.a.Fragment,null,r.a.createElement(p,{icon:"paper-plane"})," ",i("form.button."+(t||"validate"))))),e?r.a.createElement("div",{className:"text-center w-100 pt-1"},e.map((e,t)=>r.a.createElement(d,{key:t,to:e.path},i("form.additionalLink."+e.label)))):"")},ce=()=>{const{translate:e}=Object(n.useContext)(o.e);return r.a.createElement(w,null,r.a.createElement("span",{className:"h1 text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},e("pages.contact.wave.title")),r.a.createElement("div",{className:"text-justify row m-0 py-5"},r.a.createElement("div",{className:"col-sm-10 offset-sm-1 col-md-8 offset-md-2 col-lg-6 offset-lg-3"},r.a.createElement(ae,null))))};const le=()=>{const{creations:e,dispatch:t}=Object(n.useContext)(M.a),[a,s]=Object(n.useState)(e);return Object(n.useEffect)(()=>{e.length||(new R.d).getAll().then(e=>{s(e),t({payload:e,type:M.h})})},[e,t]),r.a.createElement("div",{className:"row m-0"},a.length?a.map((e,t)=>r.a.createElement("div",{className:"col-md-6 p-2",key:t},r.a.createElement(_,{item:Object.assign(Object.assign({},e),{href:e.link})},r.a.createElement("h2",{className:"font-weight-bolder text-white m-0"},e.name),r.a.createElement("span",{className:"d-none pt-0 pt-md-3 d-md-block container"},e.tags.map((e,t)=>r.a.createElement("span",{key:t,className:"px-1"},r.a.createElement("span",{className:"font-weight-bold text-light badge badge-outline-light"},e))))))):r.a.createElement(A,{text:"creations"}))},oe=()=>{const{translate:e}=Object(n.useContext)(o.e);return r.a.createElement(w,{title:"pages.creations.list.title"},r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},e("pages.creations.wave.title")),r.a.createElement("span",{className:"h5 text-center font-weight-lighter text-white m-auto col-12"},e("pages.creations.wave.subtitle")))),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement(s.Container,null,r.a.createElement(le,null))))};oe.getInitialProps=()=>[(new R.d).getAll().then(e=>({creations:{creations:e}}))];const ie=()=>r.a.createElement(w,null,r.a.createElement("div",{className:"col-12 col-sm-10 offset-sm-1 col-md-8 offset-md-2 col-lg-6 fade-in-from-bottom anim-delay--5 card"},r.a.createElement(ne,null)));const me=({description:e,page:t,section:a})=>{const{translate:s}=Object(n.useContext)(o.e);return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"text-center d-flex"},r.a.createElement("h1",{className:"h1-responsive m-auto title-category"},s(`pages.${t}.section.${a}.title`),r.a.createElement("div",{className:"dropdown-divider"}))),e)},ue=()=>{const{translate:e}=Object(n.useContext)(o.e);return r.a.createElement(w,null,r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase"},r.a.createElement("span",{className:"h1 text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},e("pages.home.wave.title")),r.a.createElement("span",{className:"h5 text-center font-weight-lighter text-white m-auto col-12"},e("pages.home.wave.subtitle")),r.a.createElement("div",{className:"w-100 pt-5 text-center"},r.a.createElement("a",{href:"http://cache/cv",rel:"noopener noreferrer",target:"_blank"},r.a.createElement(N,{outlined:!0},r.a.createElement("span",{className:"fs-3 text-center font-weight-lighter p-2"},r.a.createElement(p,{icon:"download"})," ",e("pages.home.wave.download"))))))),(e=>{const t=(t,a)=>e(`pages.home.section.${t}.descriptions.${a}`);return[{description:r.a.createElement("h5",{className:"h5-responsive m-0"},t("0","0")," ",r.a.createElement(u,{href:"https://les-tilleuls.coop"},"les-tilleuls.coop"),", ",t("0","1"),".")},{description:r.a.createElement("h5",{className:"h5-responsive m-0"},t("1","0")," ",r.a.createElement(u,{href:"https://github.com/darkweak/Souin"},"Souin"),". ",t("1","1")," ",r.a.createElement(u,{href:"https://marketplace.devcv.fr"},t("1","2")),". ",t("1","3")," : ",r.a.createElement(u,{href:"https://github.com/darkweak/Marketplace"},"Marketplace"),". ",t("1","4"),".")},{description:r.a.createElement(r.a.Fragment,null,r.a.createElement(J,{conferenceContext:"welcome",loadingText:"last",max:2,perRow:2}),r.a.createElement("div",{className:"d-flex p-2"},r.a.createElement(d,{to:"/conferences",className:"ml-auto text-black-50 text-decoration-none"},t("2","0")," ",r.a.createElement(p,{icon:"arrow-circle-right"}))))}]})(e).map((e,t)=>r.a.createElement("div",{key:t,className:"text-justify bg-light "+(t>0&&"py-5")},r.a.createElement(L,null,r.a.createElement(s.Container,null,r.a.createElement(me,Object.assign({},e,{section:t,page:"home"})))))))};ue.getInitialProps=()=>[new R.b({filters:{perPage:2..toString()}}).getAll().then(e=>({welcome:{conferences:e}}))];var de=a(6);class pe extends de.b{constructor(e){super(e),this.competences=e.competences,this.name=e.name}}class ge extends de.a{constructor(){super(...arguments),this.endpoint="/categories"}getAll(){return this.getMany().then(e=>e.map(e=>new pe(e)))}}const he=()=>{const{translate:e}=Object(n.useContext)(o.e),{categories:t,dispatch:a}=Object(n.useContext)(M.a),[c,l]=Object(n.useState)(t||[]);return Object(n.useEffect)(()=>{t.length||(new ge).getAll().then(e=>{l(e),a({payload:e,type:M.e})})},[t,a]),r.a.createElement(w,{title:"pages.skills.title"},r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},e("pages.skills.wave.title")),r.a.createElement("span",{className:"h5 text-center font-weight-lighter text-white m-auto col-12"},e("pages.skills.wave.subtitle")))),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement(s.Container,null,c.length?c.map((e,t)=>r.a.createElement("div",{className:"pb-5",key:t},r.a.createElement("div",{className:"bg-secondary p-4 position-relative"},r.a.createElement("h2",{className:"middle-line text-white text-center m-0"},e.name)),r.a.createElement("div",{className:"row m-0 b-e-t-secondary"},e.competences.map((e,t)=>r.a.createElement("div",{className:"col-xs-12 col-sm-6 col-lg-4 btop-secondary p-3 d-flex"},r.a.createElement(u,{href:e.link,className:"text-decoration-none text-muted text-center m-auto"},r.a.createElement("span",{className:"h4 m-0"},e.name))))))):r.a.createElement(A,{text:"skills"}))))};he.getInitialProps=()=>[(new ge).getAll().then(e=>({categories:{categories:e}}))];var fe=he;a(27);class be extends de.b{constructor(e){super(e),this.cp=e.cp,this.city=e.city,this.institute=e.institute,this.name=e.name,this.startedAt=new Date(e.startedAt)}}class ve extends de.a{getAll(){return this.getMany().then(e=>e.map(this.model))}}class Ee extends be{constructor(e){super(e),this.leavedAt=new Date(e.obtainedAt)}}class we extends ve{constructor(){super(...arguments),this.endpoint="/diplomas",this.model=e=>new Ee(e)}getAll(){return super.getAll()}}class xe extends be{constructor(e){super(e),this.isValid=e.isValid,this.leavedAt=e.leavedAt?new Date(e.leavedAt):void 0,this.referent=e.referent}}class ye extends ve{constructor(){super(...arguments),this.endpoint="/jobs",this.model=e=>new xe(e)}getAll(){return super.getAll()}}const je=({items:e,title:t,type:a="primary"})=>{const{translate:s}=Object(n.useContext)(o.e),l=e=>s("pages.career."+e);return r.a.createElement("div",{className:"col-md-6"},r.a.createElement("div",{className:`bs-bg-${a||"primary"} p-4 text-center`},r.a.createElement("h2",{className:"middle-line text-white text-center m-0"},l(t))),e.length?e.map((e,t)=>{var n;return r.a.createElement("div",{className:`bs-alert bs-alert-${a||"primary"} p-3 text-center mb-2`,key:t},r.a.createElement("h3",null,e.name),r.a.createElement("div",{className:"py-3"},r.a.createElement("h4",null,e.institute),r.a.createElement("span",{className:"d-block"},`${e.cp} ${e.city}`)),r.a.createElement("span",null,Object(c.g)(l(e.leavedAt?"fromTo":"fromToToday"),[e.startedAt.toLocaleDateString(),(null===(n=e.leavedAt)||void 0===n?void 0:n.toLocaleDateString())||""])))}):r.a.createElement(A,{text:"career."+t}))},Oe=()=>{const{translate:e}=Object(n.useContext)(o.e),t=t=>e("pages.career."+t),{diplomas:a,jobs:s,dispatch:c}=Object(n.useContext)(M.a),[l,i]=Object(n.useState)(a),[m,u]=Object(n.useState)(s);return Object(n.useEffect)(()=>{a.length||(new we).getAll().then(e=>{i(e),c({payload:e,type:M.i})})},[a,c]),Object(n.useEffect)(()=>{s.length||(new ye).getAll().then(e=>{u(e),c({payload:e,type:M.j})})},[s,c]),r.a.createElement(w,{title:"pages.career.title"},r.a.createElement(S,null,r.a.createElement(L,{className:"mx-auto text-uppercase"},r.a.createElement("h1",{className:"text-center font-weight-lighter text-white m-auto col-12 pb-4 pb-sm-0"},t("wave.title")),r.a.createElement("span",{className:"h5 text-center font-weight-lighter text-white m-auto col-12"},t("wave.subtitle")))),r.a.createElement("div",{className:"bg-light pb-4"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row m-0"},r.a.createElement(je,{title:"jobs",items:m}),r.a.createElement(je,{title:"diplomas",items:l,type:"success"})))))};Oe.getInitialProps=()=>[(new we).getAll().then(e=>e),(new ye).getAll().then(e=>e)];var Ne=Oe;a.d(t,"a",(function(){return ke})),a.d(t,"b",(function(){return Se}));const Ce=[{component:ie,icon:{icon:"input"},modulePath:"./pages/Login",name:"account.login",path:"/login"}],ke=[{component:ue,exact:!0,icon:{icon:"home"},modulePath:"./pages/Welcome",name:"home",path:"/",realPath:"/"},{component:Q,icon:{icon:"microphone"},modulePath:"./pages/Conferences/List",name:"conferences",path:"/conferences",realPath:"/conferences"},{component:z,icon:{icon:"newspaper",type:"far"},modulePath:"./pages/Blog/List",name:"blog",path:"/blog",realPath:"/blog"},{component:Ne,icon:{icon:"newspaper",type:"far"},modulePath:"./pages/Career",name:"career",path:"/career",realPath:"/career"},{component:fe,icon:{icon:"newspaper",type:"far"},modulePath:"./pages/Skills",name:"skills",path:"/skills",realPath:"/skills"},{component:oe,icon:{icon:"palette"},modulePath:"./pages/Creations/List",name:"creations",path:"/creations",realPath:"/creations"},{component:ce,icon:{icon:"envelope"},modulePath:"./pages/Contact",name:"contact",path:"/contact"}],Se=[...[{component:B,icon:{icon:""},modulePath:"./pages/Blog/Item",name:"blog",path:"/blog/:slug",realPath:""},{component:V,icon:{icon:""},modulePath:"./pages/Conferences/Item",name:"conferences",path:"/conferences/:city([a-z]+)-:date([0-9]{4}-[0-9]{2}-[0-9]{2})",realPath:""}],...ke,...Ce,{changeLanguage:e=>e("fr"),handleClick:!0,icon:{icon:""},name:"language.fr",path:"/language.fr",strict:!0,exact:!0},{changeLanguage:e=>e("en"),exact:!0,handleClick:!0,icon:{icon:""},name:"language.en",path:"/language.en",strict:!0}]},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("react-router")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("jwt-decode")},function(e,t,a){},function(e){e.exports=JSON.parse('{"form":{"additionalLink":{"login":"Already registered?","register":"Not yet registered?"},"button":{"send":"Send","submit":"Submit","validate":"Validate"},"contact":{"error":"An error occurred, try again later","success":"Your message has been successfully sent!"},"field":{"email":{"label":"Email","placeholder":"your@email.com"},"firstname":{"label":"First name","placeholder":"First name"},"lastname":{"label":"Last name","placeholder":"Last name"},"message":{"label":"Message content","placeholder":"A question, a sweet word?"},"password":{"label":"Password","placeholder":"yourpassword"},"subject":{"label":"Message subject","placeholder":"Message subject"},"username":{"label":"Username","placeholder":"johndoe"}},"login":{"error":"Invalid credentials"},"register":{"error":"An error occurred, try again later"}},"footer":{"developped":"Developped by","made":"Made with","find":"Find me on"},"loader":{"article":{"item":"Loading article...","list":{"default":"Loading articles..."}},"career":{"diplomas":"Loading diplomas...","jobs":"Loading jobs..."},"creations":"Loadings creations...","conference":{"item":"Loading conference...","list":{"default":"Loading conferences...","last":"Loading last 2 conferences..."}},"default":"Loading in progress...","skills":"Loadings skills..."},"navbar":{"about":"About","account":{"label":"Account","login":"Login","logout":"Logout","register":"Register"},"blog":"Blog","career":"Career","conferences":"Conferences","contact":"Contact","creations":"Creations","home":"Home","language":{"label":"Language","fr":"French","en":"English"},"skills":"Skills"},"pages":{"article":{"list":{"title":"Article list"},"wave":{"subtitle":"Technical articles","title":"Blog"}},"career":{"fromTo":"From %s to %s","fromToToday":"From %s to today","diplomas":"Diplomas","jobs":"Jobs","title":"Jobs and diplomas","wave":{"subtitle":"Jobs and diplomas","title":"Career"}},"conferences":{"item":{"title":"Conference %s"},"list":{"title":"Conference list"},"wave":{"title":"Conferences","subtitle":"Previous and upcoming"}},"contact":{"wave":{"title":"Contact me","subtitle":""}},"creations":{"list":{"title":"Creations list"},"wave":{"subtitle":"Personal and professional","title":"Creations"}},"home":{"section":{"0":{"descriptions":["My name is Sylvain COMBRAQUE and I\'m actually full-stack developer at","passionate by development, more precisely by web development because it can show the developer creativity."],"title":"Who am I ?"},"1":{"descriptions":["Creator of cache system for Træfik called","This caching system is compatible with any reverse proxy like Apache or Nginx since it\'s v1.1. I already experimented a template creation for a marketplace that you can retrieve at","this address","This service is open-source, free and without ads, all sources are availables on my Github","This project made me possible to practice API Platform (ReactJS for front-end side, Symfony for Back-end/API side) with Træfik (for the load-balancing and containers orchestration sides), NodeJS (for SSR side), and all of that was packaged with Swarm clusters"],"title":"A passionate developer"},"2":{"descriptions":["See all conferences"],"title":"Previous conferences"}},"wave":{"download":"Download my CV","title":"Sylvain COMBRAQUE","subtitle":"Developer - Speaker"}},"skills":{"title":"Skills list","wave":{"subtitle":"Technical and functional","title":"Skills"}}}}')},function(e){e.exports=JSON.parse('{"form":{"additionalLink":{"login":"Déjà inscrit ?","register":"Pas encore inscrit ?"},"button":{"send":"Envoyer","submit":"Envoyer","validate":"Valider"},"contact":{"error":"Une erreur est survenue, veuillez réessayer plus tard","success":"Votre message a bien été envoyé!"},"field":{"email":{"label":"Email","placeholder":"votre@email.fr"},"firstname":{"label":"Prénom","placeholder":"Prénom"},"lastname":{"label":"Nom de famille","placeholder":"Nom de famille"},"message":{"label":"Contenu du message","placeholder":"Une question, un mot doux ?"},"password":{"label":"Mot de passe","placeholder":"votremotdepasse"},"subject":{"label":"Sujet du message","placeholder":"Sujet du message"},"username":{"label":"Nom d\'utilisateur","placeholder":"johndoe"}},"login":{"error":"Identifiants invalides"},"register":{"error":"Une erreur est survenue, veuillez réessayer plus tard"}},"footer":{"developped":"Développé par","made":"Fait avec","find":"Retrouvez moi sur"},"loader":{"article":{"item":"Chargement de l\'article...","list":{"default":"Chargement des articles..."}},"career":{"diplomas":"Chargement des diplômes...","jobs":"Chargement des emplois..."},"conference":{"item":"Chargement de la conférence...","list":{"default":"Chargement des conférences...","last":"Chargement des 2 dernières conférences..."}},"creations":"Chargements des créations...","default":"Chargement en cours...","skills":"Chargements des compétences..."},"navbar":{"about":"À propos","account":{"label":"Compte","login":"Connexion","logout":"Déconnexion","register":"Inscription"},"blog":"Blog","career":"Carrière","conferences":"Conférences","contact":"Contact","creations":"Créations","home":"Accueil","language":{"label":"Langage","fr":"Français","en":"Anglais"},"skills":"Compétences"},"pages":{"article":{"list":{"title":"Liste des articles"},"wave":{"subtitle":"Articles techniques","title":"Blog"}},"career":{"diplomas":"Diplômes","fromTo":"Du %s au %s","fromToToday":"Du %s à aujourd\'hui","jobs":"Emplois","title":"Emplois et diplômes","wave":{"subtitle":"Emplois et diplômes","title":"Carrière"}},"conferences":{"item":{"title":"Conférence %s"},"list":{"title":"Liste de conférences"},"wave":{"subtitle":"Passées et à venir","title":"Conférences"}},"contact":{"wave":{"subtitle":"","title":"Me contacter"}},"creations":{"list":{"title":"Liste des créations"},"wave":{"title":"Créations","subtitle":"Personnelles et professionnelles"}},"home":{"section":{"0":{"descriptions":["Je m\'appelle Sylvain COMBRAQUE et je suis actuellement développeur full-stack chez","passioné par le développement, en particulier le développement web car cela permet de mettre à parti la créativité d\'une personne."],"title":"Qui suis-je ?"},"1":{"descriptions":["Créateur d\'un système de cache pour Træfik nommé","Ce système de cache est compatible avec n\'importe quel reverse proxy (Apache, Nginx) depuis la v1.1. J\'ai pu notament expérimenter la mise en place d\'un template pour une marketplace que vous pouvez retrouver le site à","cette adresse","Ce service est open-source, gratuit et sans publicités, vous avez toutes les sources disponibles sur mon Github","Par exemple ce projet m\'a permis de mettre en pratique API Platform (ReactJS pour la partie client, Symfony pour le back-office) avec Traefik (pour la gestion des services avec un reverse proxy et le load-balancing), NodeJS (pour le Server-Side Rendering du client), le tout packagé avec Swarm (pour l\'orchestration et le scaling des conteneurs)"],"title":"Un développeur passionné"},"2":{"descriptions":["Voir toutes les conférences"],"title":"Mes dernières conférences"}},"wave":{"download":"Télécharger mon CV","subtitle":"Développeur - Conférencier","title":"Sylvain COMBRAQUE"}},"skills":{"title":"Liste des compétences","wave":{"subtitle":"Techniques et fonctionnelles","title":"Compétences"}}}}')},function(e,t){e.exports=require("react-highlight.js")},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("react-router-config")},function(e,t,a){"use strict";a.d(t,"a",(function(){return v}));var n=a(0),r=a.n(n),s=a(11),c=a.n(s),l=a(20),o=a(7),i=a(8),m=a(4),u=a(1),d=a(21);const p="https://devcv.fr",g="https://sylvaincdn.000webhostapp.com/devcv",h="Sylvain COMBRAQUE - CV",f="/favicon.png",b=c.a.resolve("./public/dist/loadable-stats.json"),v=(e,t,a)=>{const n=new d.ChunkExtractor({publicPath:g+"/dist",statsFile:b}),s=Object(l.renderToString)(r.a.createElement(m.b,null,r.a.createElement(o.StaticRouter,{location:t,context:e},r.a.createElement(o.Switch,null,i.b.map((e,t)=>{const a=e.component;return r.a.createElement(o.Route,{key:t,exact:!0,path:"/:language([a-z]{2})?"+("/"===e.path?"":e.path),render:()=>r.a.createElement(u.f,null,r.a.createElement(a,null))})})))));return`<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0" />\n    <meta name="theme-color" content="#000000">\n    <meta name="description" content="${h}" />\n    <link rel="shortcut icon" href="${p}${f}">\n    <meta itemprop="name" content="devcv">\n    <meta itemprop="image" content="${p}${f}">\n    <meta name="twitter:card" content="summary_large_image">\n    <meta name="twitter:site" content="@darkweak_dev">\n    <meta name="twitter:title" content="devcv">\n    <meta name="twitter:description" content="${h}">\n    <meta name="twitter:creator" content="@darkweak_dev">\n    <meta name="twitter:image:src" content="${p}${f}">\n    <meta property="og:title" content="devcv">\n    <meta property="og:type" content="website">\n    <meta property="og:url" content="${p}${t}">\n    <meta property="og:image" content="${p}${f}">\n    <meta property="og:description" content="${h}">\n    <meta property="og:site_name" content="devcv">\n    <link rel="canonical" href="${p}${t}" />\n    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">\n    <link rel="stylesheet" href="https://unpkg.com/shards-ui@latest/dist/css/shards.min.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css" integrity="sha256-46qynGAkLSFpVbEBog43gvNhfrOj+BmwXdxFgVK/Kvc=" crossorigin="anonymous" />\n    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlightjs@9.12.0/styles/tomorrow.css">\n    <link rel="stylesheet" href="${g}/dist/main.css"/>\n    <title>devcv | Sylvain COMBRAQUE</title>\n  </head>\n  <body>\n    <noscript>\n    </noscript>\n    <div id="root">${s}</div>\n    <script>window.INITIAL_STATE = ${JSON.stringify(a)}<\/script>\n    ${n.getScriptTags()}\n  </body>\n</html>`}},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("@loadable/server")},function(e,t,a){"use strict";a.r(t),function(e){var t=a(9),n=a.n(t),r=a(11),s=a.n(r),c=a(8),l=a(3),o=a(18),i=a(19),m=function(e,t,a,n){return new(a||(a=Promise))((function(r,s){function c(e){try{o(n.next(e))}catch(e){s(e)}}function l(e){try{o(n.throw(e))}catch(e){s(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(c,l)}o((n=n.apply(e,t||[])).next())}))};const u=n()();u.use(n.a.static(s.a.join(e,"../../public"))),u.use("/favicon.png",n.a.static("public/favicon.png")),u.use("/dist",n.a.static("public/dist")),u.get("/sitemap",(e,t)=>m(void 0,void 0,void 0,(function*(){let e=[];const a=(new Date).toISOString().split("T")[0],n=["en","fr"].map(e=>c.a.map(({path:t})=>({path:`/${e}${t}`}))).flat();yield Promise.all([(new l.a).getAll(),(new l.b).getAll()]).then(([e,t])=>{e.forEach(e=>{const t=e.translations;Object.keys(t).map(e=>n.push({path:`/blog/${e}/${t[e].slug}`}))}),t.forEach(e=>n.push({path:e.to}))}).catch(console.log),n.map(t=>e.push(`<url>\n    <loc>https://devcv.fr${t.path}</loc>\n    <lastmod>${a}</lastmod>\n    <changefreq>daily</changefreq>\n  </url>`)),t.header("Content-Type","text/xml"),t.send(`<?xml version="1.0" encoding="UTF-8"?>\n  <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n    ${e.join("\n")}\n  </urlset>\n  `)}))),u.get("*",(e,t)=>m(void 0,void 0,void 0,(function*(){let a={};const n=[];Object(o.matchRoutes)(c.b.map(e=>Object.assign(Object.assign({},e),{exact:!0,path:"/:language([a-z]{2})"+e.path})),e.path).map(({route:t})=>{var a;return(null===(a=t.component)||void 0===a?void 0:a.getInitialProps)?t.component.getInitialProps(e.path.split("/")):[]}).map(e=>n.push(...e)),yield Promise.all(n).then(e=>e.forEach(e=>a=Object.assign(Object.assign({},a),e))).catch(console.log);const r=Object(i.a)({},e.path,a);t.send(r)}))),u.listen(3e3,()=>console.log("Frontend service listening on port: 3000"))}.call(this,"/")},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,